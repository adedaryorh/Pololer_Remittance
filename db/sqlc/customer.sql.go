// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: customer.sql

package db

import (
	"context"
	"time"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customer (
        email,
        hashed_password,
        username,
        firstname,
        lastname,
        gender,
        state_of_origin
) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, email, hashed_password, username, firstname, lastname, gender, state_of_origin, created_at, updated_at
`

type CreateCustomerParams struct {
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
	Username       string `json:"username"`
	Firstname      string `json:"firstname"`
	Lastname       string `json:"lastname"`
	Gender         string `json:"gender"`
	StateOfOrigin  string `json:"state_of_origin"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.Email,
		arg.HashedPassword,
		arg.Username,
		arg.Firstname,
		arg.Lastname,
		arg.Gender,
		arg.StateOfOrigin,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Gender,
		&i.StateOfOrigin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllCustomer = `-- name: DeleteAllCustomer :exec
DELETE FROM customer
`

func (q *Queries) DeleteAllCustomer(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllCustomer)
	return err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customer WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, id)
	return err
}

const getCustomerByEmail = `-- name: GetCustomerByEmail :one
SELECT id, email, hashed_password, username, firstname, lastname, gender, state_of_origin, created_at, updated_at FROM customer WHERE email= $1
`

func (q *Queries) GetCustomerByEmail(ctx context.Context, email string) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByEmail, email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Gender,
		&i.StateOfOrigin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT id, email, hashed_password, username, firstname, lastname, gender, state_of_origin, created_at, updated_at FROM customer WHERE id= $1
`

func (q *Queries) GetCustomerByID(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByID, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Gender,
		&i.StateOfOrigin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCustomer = `-- name: ListCustomer :many
SELECT id, email, hashed_password, username, firstname, lastname, gender, state_of_origin, created_at, updated_at FROM customer ORDER BY id
LIMIT $1 OFFSET $2
`

type ListCustomerParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCustomer(ctx context.Context, arg ListCustomerParams) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, listCustomer, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.HashedPassword,
			&i.Username,
			&i.Firstname,
			&i.Lastname,
			&i.Gender,
			&i.StateOfOrigin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomerPassword = `-- name: UpdateCustomerPassword :one
UPDATE customer SET hashed_password = $1, updated_at = $2
WHERE id = $3 RETURNING id, email, hashed_password, username, firstname, lastname, gender, state_of_origin, created_at, updated_at
`

type UpdateCustomerPasswordParams struct {
	HashedPassword string    `json:"hashed_password"`
	UpdatedAt      time.Time `json:"updated_at"`
	ID             int64     `json:"id"`
}

func (q *Queries) UpdateCustomerPassword(ctx context.Context, arg UpdateCustomerPasswordParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, updateCustomerPassword, arg.HashedPassword, arg.UpdatedAt, arg.ID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Gender,
		&i.StateOfOrigin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
